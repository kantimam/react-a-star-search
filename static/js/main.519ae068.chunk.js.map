{"version":3,"sources":["components/UiContainer.jsx","util/util.js","path-finder/path-finder.js","components/Node.jsx","components/FieldClass.jsx","App.js","serviceWorker.js","index.js"],"names":["UiContainer","finder","reset","uiMode","id","className","onClick","findRandomPath","runStep","run","randomInt","start","end","Math","floor","random","Pathfinder","uiFunction","console","log","openSet","Set","closedSet","loop","steps","finished","running","path","setHeuristic","from","to","hypot","x","y","checkDia","field","drawFunction","this","fieldWidth","length","fieldHeight","clearTimeout","clear","fillField","fieldFlat","flat","drawField","draw","add","node","randomStart","randomEnd","startNode","endNode","findValidPaths","setInterval","step","size","findLowestFScore","updateSets","checkNeigbors","clearInterval","lastNode","current","cameFrom","push","currentPath","createPath","i","min","values","next","value","f","drawPath","delete","neighbors","has","tempG","g","h","blocked","setStart","setEnd","Node","colors","memo","width","height","item","nodeOnClick","createWall","useState","color","setColor","onMouseMove","event","buttons","style","left","top","backgroundColor","FieldClass","props","fieldRef","React","createRef","dimX","dimY","out","Array","fill","create2dArray","col","row","callAfterCss","bind","waitForCss","state","setState","requestAnimationFrame","clientWidth","cellSize","clientHeight","init","data","cancelAnimationFrame","setStartNode","setEndNode","ref","map","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.519ae068.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst UiContainer = ({finder, reset, uiMode}) => {\r\n    if(!finder) return (\r\n        <div id=\"uiContainer\" className=\"fancyShadow\">\r\n            <h1 className=\"fancyShadow infoHeader\">LOADING</h1>\r\n        </div>\r\n        )\r\n    return (\r\n        <div id=\"uiContainer\" className=\"fancyShadow\">\r\n            <h1 className=\"fancyShadow infoHeader\">{uiMode}</h1>\r\n            <button className={`fancyShadow`} onClick={() => finder.findRandomPath()}>random path</button>\r\n            <button className=\"fancyShadow\" onClick={() => finder.runStep()}>STEP</button>\r\n            <button className=\"fancyShadow\" onClick={() => finder.run()}>START</button>\r\n            <button className=\"fancyShadow active\" onClick={reset}>RESET</button>\r\n        </div>\r\n               \r\n    )\r\n}\r\n\r\nexport default UiContainer\r\n","export function create2dArray(dimX, dimY){\r\n    const out=new Array(dimY);\r\n    for(let i=0;i<out.length;i++) out[i]=new Array(dimX).fill(0);\r\n    return out;\r\n}\r\n\r\nexport const randomInt=(start, end)=>Math.floor(Math.random()*(end-start+1))+start;\r\n\r\n","import {randomInt} from '../util/util'\r\n\r\nexport class Pathfinder{\r\n    field; // actual 2d grid\r\n    fieldWidth;\r\n    fieldHeight;\r\n    drawFunction;  // function to draw the field setState in this case\r\n    uiFunction=()=>console.log(\"no function to update react ui set\")\r\n    fieldFlat; // 1dim version of the grid for easier looping and drawing\r\n    openSet=new Set();\r\n    closedSet=new Set();\r\n    \r\n    start;\r\n    end;\r\n    current;\r\n\r\n    loop=null;\r\n    steps=0;\r\n    finished=false;\r\n    running=false;\r\n\r\n    path=[]\r\n\r\n    \r\n    // move here from constructor\r\n    init(field, drawFunction, uiFunction){\r\n        this.field=field;\r\n        this.drawFunction=drawFunction;\r\n        if(uiFunction) this.uiFunction=uiFunction;\r\n        this.fieldWidth=this.field[0].length;\r\n        this.fieldHeight=this.field.length;\r\n        this.reset();\r\n\r\n    }\r\n\r\n    reset(){\r\n        this.finished=false;\r\n        this.running=false;\r\n        this.steps=0;\r\n        this.path=[];\r\n        if(this.loop) clearTimeout(this.loop);\r\n        this.openSet.clear();\r\n        this.closedSet.clear();\r\n        this.fillField();\r\n        this.start=null;\r\n        this.end=null;\r\n        this.fieldFlat=this.field.flat(1);\r\n        this.drawField();\r\n        this.uiFunction(\"SET START\");\r\n    }\r\n\r\n   \r\n\r\n\r\n    setStart(x,y){\r\n        this.start=this.field[y][x];\r\n        this.start.draw=1;\r\n        this.openSet.add(this.start);\r\n\r\n        this.uiFunction(\"SET END\");\r\n\r\n    }\r\n\r\n    setEnd(x,y){\r\n        this.end=this.field[y][x];\r\n        this.end.draw=3;\r\n\r\n        this.uiFunction(\"SET BLOCKED\");\r\n\r\n    }\r\n\r\n    setStartNode(node){\r\n        this.start=node;\r\n        this.start.draw=1;\r\n        this.openSet.add(this.start);\r\n\r\n        this.uiFunction(\"SET END\");\r\n\r\n    }\r\n\r\n    setEndNode(node){\r\n        this.end=node;\r\n        this.end.draw=3;\r\n\r\n        this.uiFunction(\"SET BLOCKED\");\r\n    }\r\n\r\n\r\n    findRandomPath(){\r\n        this.randomStart();\r\n        this.randomEnd();\r\n        this.run();\r\n    }\r\n\r\n    findFromTo(startNode, endNode){\r\n        this.start=startNode;\r\n        this.end=endNode;\r\n        this.run();\r\n    }\r\n\r\n\r\n    run(){\r\n        /* dont allow to restart while still running */\r\n        if(this.finished || this.running){\r\n            this.uiFunction(\"RESET FIRST\") \r\n            return console.log(\"reset before starting a new finder\");\r\n        }\r\n        if(!this.field.length || !this.drawFunction) return console.log(\"seems like init failed\");\r\n        if(!this.start) return console.log(\"please set a start node. setStart(x,y)\");\r\n        if(!this.end) return console.log(\"please set a end node. setEnd(x,y)\");\r\n        \r\n        this.drawField();\r\n        this.findValidPaths();\r\n\r\n        this.uiFunction(\"RUNNING\");\r\n\r\n        this.running=true;\r\n\r\n        this.loop=setInterval(()=>{\r\n            this.step();\r\n        }, 10)\r\n        \r\n    }\r\n\r\n\r\n    runStep(){\r\n        if(this.finished || this.running){ \r\n            this.uiFunction(\"RESET FIRST\") \r\n            return console.log(\"reset before starting a new finder\")\r\n        }\r\n\r\n        // if its the first step prepare nodes\r\n        if(!this.steps){\r\n            if(!this.field.length || !this.drawFunction) return console.log(\"seems like init failed\");\r\n            if(!this.start) return console.log(\"please set a start node. setStart(x,y)\");\r\n            if(!this.end) return console.log(\"please set a end node. setEnd(x,y)\");\r\n            \r\n            this.drawField();\r\n            this.findValidPaths();\r\n            \r\n            this.uiFunction(\"CLICK STEP OR RUN\");\r\n        }\r\n        this.step();\r\n        \r\n    }\r\n\r\n    step(){\r\n        if(this.openSet.size){\r\n            this.findLowestFScore();\r\n            this.updateSets();\r\n            this.checkNeigbors();\r\n            //this.drawPath();\r\n            this.drawField();\r\n            this.steps++;\r\n        }else{ \r\n            clearInterval(this.loop);\r\n            this.finished=true;\r\n            this.running=false;\r\n            this.uiFunction(\"COULD NOT BE SOLVED\");\r\n            console.log(\"could not be solved! :(\")\r\n        }\r\n    }\r\n\r\n    drawField(){\r\n        // looks like drawing with this many divs takes ages :( maybe move to webgl canvas \r\n        this.drawFunction([...this.fieldFlat]);\r\n    }\r\n\r\n    /* drawPath(){\r\n        this.loop=setInterval(()=>{\r\n            if(!this.current.cameFrom){\r\n                this.path.unshift(this.current);\r\n                this.current.draw=1;\r\n                this.drawField();\r\n\r\n                this.running=false;\r\n                console.log(this.path)\r\n                return clearTimeout(this.loop);\r\n            } \r\n            this.path.unshift(this.current);\r\n            this.current=this.current.cameFrom;\r\n            this.current.draw=4;\r\n            this.drawField();\r\n        }, 100);\r\n    } */\r\n\r\n    createPath(){\r\n        const path=[]\r\n        let lastNode=this.current;\r\n        while(lastNode.cameFrom){\r\n            path.push(lastNode)\r\n            lastNode=lastNode.cameFrom;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    drawPath(){\r\n      const currentPath=this.createPath();\r\n      for(let i=0; i<currentPath.length; i++){\r\n        currentPath[i].draw=4;\r\n      }\r\n      this.start.draw=1;\r\n      this.end.draw=3;\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    findLowestFScore(){\r\n        this.min=this.openSet.values().next().value;\r\n        //console.log(this.openSet.size)\r\n        for(let node of this.openSet){\r\n            if(node.f<this.min.f) this.min=node;\r\n        }\r\n        this.current=this.min;\r\n    }\r\n    \r\n    updateSets(){\r\n        if(this.current===this.end){\r\n            // stop looping when done\r\n            clearTimeout(this.loop); \r\n            this.current.draw=3\r\n            console.log(\"solved! :3\")\r\n            this.finished=true;\r\n            this.uiFunction(\"SOLVED! :)\")\r\n            return this.drawPath();\r\n        };\r\n        this.openSet.delete(this.current);\r\n        this.closedSet.add(this.current);\r\n\r\n        this.current.draw=2;\r\n        \r\n    }\r\n\r\n    \r\n\r\n    checkNeigbors(){\r\n\r\n        for(let i=0; i<this.current.neighbors.length; i++){\r\n\r\n            if(!this.closedSet.has(this.current.neighbors[i])){ \r\n\r\n                let tempG=this.current.g+this.checkDia(this.current, this.current.neighbors[i]);\r\n                if(!this.openSet.has(this.current.neighbors[i])){\r\n                    this.openSet.add(this.current.neighbors[i]);\r\n                }else if(tempG>=this.current.neighbors[i].g){\r\n                    continue;\r\n                } \r\n                \r\n                this.current.neighbors[i].g=tempG;\r\n\r\n                this.current.neighbors[i].cameFrom=this.current;\r\n\r\n\r\n                this.current.neighbors[i].h=this.setHeuristic(this.current.neighbors[i], this.end);\r\n                this.current.neighbors[i].f=this.current.neighbors[i].h+this.current.neighbors[i].g;\r\n            }\r\n        }\r\n    }\r\n\r\n    /* just the distance for now */\r\n    setHeuristic=(from, to)=> Math.hypot(to.x-from.x, to.y-from.y);\r\n\r\n    /* stupid but fast as long as standart distance stays 1 :) */\r\n    checkDia=(from, to)=>(from.x-to.x && from.y-to.y)? 1.414 : 1; \r\n\r\n    // old using and updating findValidPaths for now\r\n    findNeighbors(){\r\n        for(let y=0; y<this.fieldHeight; y++){\r\n            for(let x=0; x<this.fieldWidth; x++){\r\n                y>0 && this.field[y][x].neighbors.push(this.field[y-1][x]);\r\n                x<this.fieldWidth-1 && this.field[y][x].neighbors.push(this.field[y][x+1]);\r\n                y<this.fieldHeight-1 && this.field[y][x].neighbors.push(this.field[y+1][x]);\r\n                x>0 && this.field[y][x].neighbors.push(this.field[y][x-1]);\r\n            }\r\n        }\r\n    }\r\n\r\n    findValidPaths(){\r\n        for(let y=0; y<this.fieldHeight; y++){\r\n            for(let x=0; x<this.fieldWidth; x++){\r\n                \r\n                if(y>0 && !this.field[y-1][x].blocked){\r\n                    this.field[y][x].neighbors.push(this.field[y-1][x]); // top\r\n                }\r\n\r\n                if(y>0 && x<this.fieldWidth-1 && !this.field[y-1][x+1].blocked){\r\n                    this.field[y][x].neighbors.push(this.field[y-1][x+1]); // top right\r\n                }\r\n                \r\n                if(x<this.fieldWidth-1 && !this.field[y][x+1].blocked){\r\n                    this.field[y][x].neighbors.push(this.field[y][x+1]); // right\r\n                } \r\n                \r\n                if(y<this.fieldHeight-1 && x<this.fieldWidth-1 && !this.field[y+1][x+1].blocked){\r\n                    this.field[y][x].neighbors.push(this.field[y+1][x+1]); // bottom right\r\n                }\r\n\r\n                if(y<this.fieldHeight-1 && !this.field[y+1][x].blocked){\r\n                    this.field[y][x].neighbors.push(this.field[y+1][x]); // bottom\r\n                } \r\n\r\n                if(y<this.fieldHeight-1 && x>0 && !this.field[y+1][x-1].blocked){\r\n                    this.field[y][x].neighbors.push(this.field[y+1][x-1]); // bottom left\r\n                }\r\n                \r\n                if(x>0 && !this.field[y][x-1].blocked){\r\n                    this.field[y][x].neighbors.push(this.field[y][x-1]); // left\r\n                } \r\n\r\n                if(y>0 && x>0 && !this.field[y-1][x-1].blocked){\r\n                    this.field[y][x].neighbors.push(this.field[y-1][x-1]); // top left\r\n                } \r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    randomStart(){\r\n        this.setStart(randomInt(0, this.fieldWidth-1), randomInt(0, this.fieldHeight-1));\r\n    }\r\n\r\n    randomEnd(){\r\n        this.setEnd(randomInt(0, this.fieldWidth-1), randomInt(0, this.fieldHeight-1));\r\n    }\r\n\r\n    fillField(size){\r\n        for(let y=0; y<this.fieldHeight; y++){\r\n            for(let x=0; x<this.fieldWidth; x++){\r\n                this.field[y][x]=new Node(x,y,size);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nclass Node{\r\n    neighbors=[];\r\n    cameFrom;\r\n    f=0;\r\n    g=0;\r\n    h=0;\r\n\r\n    draw=0;\r\n    blocked=false;\r\n    constructor(x, y, size){\r\n        this.x=x;\r\n        this.y=y;\r\n        this.size=size;\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\nexport default Pathfinder;","import React, {memo, useState} from 'react'\r\n\r\nconst colors=[\"white\", \"red\", \"green\", \"blue\", \"yellow\", \"black\"]\r\n\r\n\r\nconst Node = ({width, height, item, nodeOnClick, createWall}) => {\r\n    const [color, setColor]=useState(colors[item.draw])\r\n    const setNode=()=>{\r\n        /* set start and end node */\r\n        nodeOnClick(item);\r\n        setColor(colors[item.draw]);\r\n    }\r\n    const blockPath=(event)=>{\r\n        /* make your click dragable so you can paint walls easier */\r\n        if(event.buttons===1){\r\n            createWall(item);\r\n            setColor(colors[item.draw]);\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div\r\n            onClick={setNode}\r\n            onMouseMove={blockPath}\r\n            className=\"cell\"\r\n            style={{\r\n                width: `${width}px`, \r\n                height: `${height}px`, \r\n                /* left: `${x*width}px`, \r\n                top: `${y*height}px`, */\r\n\r\n                left: `${item.x*width}px`, \r\n                top: `${item.y*height}px`,\r\n                backgroundColor: color \r\n            }}\r\n        >\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default memo(Node/* , (current, next)=>{\r\n    return current.item.draw===next.item.draw\r\n} */)\r\n","import React, { Component } from 'react'\r\nimport UiContainer from \"./UiContainer\"\r\nimport { create2dArray } from '../util/util';\r\nimport { Pathfinder } from '../path-finder/path-finder.js';\r\nimport Node from './Node';\r\n\r\n\r\nexport default class FieldClass extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.fieldRef = React.createRef();\r\n\r\n        this.field = create2dArray(this.props.col || 20, this.props.row || 20);\r\n        this.finder = new Pathfinder();\r\n\r\n        this.callAfterCss = this.callAfterCss.bind(this);\r\n        this.nodeOnClick = this.nodeOnClick.bind(this);\r\n        this.createWall = this.createWall.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n        this.waitForCss = null;\r\n\r\n        this.state = {\r\n            width: 0,\r\n            height: 0,\r\n            field: [],\r\n            uiMode: \"pending\"\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.setState({ uiMode: \"set start\" })\r\n        this.finder.reset();\r\n        this.finder.drawField();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.waitForCss = requestAnimationFrame(this.callAfterCss);\r\n    }\r\n\r\n    callAfterCss() {\r\n        /* componentdidmount fires before dom actually painted anything so wait for first real paint to measure the container */\r\n        if (this.fieldRef.current && this.field.length && this.waitForCss) {\r\n            /* make the cells square */\r\n            if (this.fieldRef.current.clientWidth > 0) {\r\n                const cellSize = this.fieldRef.current.clientWidth / this.field[0].length;\r\n                this.setState({ width: cellSize, height: cellSize, uiMode: \"set start\" });\r\n            } else if (this.fieldRef.current.clientHeight > 0) {\r\n                const cellSize = this.fieldRef.current.clientHeight / this.field[0].length;\r\n                this.setState({ width: cellSize, height: cellSize, uiMode: \"set start\" });\r\n            }\r\n            this.finder.init(this.field, (data) => this.setState({ field: data }), (data) => this.setState({ uiMode: data }));\r\n\r\n            cancelAnimationFrame(this.callAfterCss);\r\n        }\r\n    }\r\n\r\n    nodeOnClick(node) {\r\n        /* set start and end node */\r\n        if (this.finder && this.finder.finished) return console.log(\"already finished. reset and start again\")\r\n        if (this.finder && this.finder.running) return console.log(\"currently running. reset and start again\")\r\n\r\n        if (this.state.uiMode === \"SET START\") {\r\n            return this.finder.setStartNode(node);\r\n        }\r\n        if (this.state.uiMode === \"SET END\") {\r\n            return this.finder.setEndNode(node);\r\n        }\r\n\r\n    }\r\n\r\n    createWall(node) {\r\n        /* create walls */\r\n        if (this.finder && this.finder.finished) return console.log(\"already finished. reset and start again\")\r\n        if (this.finder && this.finder.running) return console.log(\"currently running. reset and start again\")\r\n\r\n        if (this.state.uiMode === \"SET BLOCKED\") {\r\n            if (node === this.finder.start || node === this.finder.end) return\r\n            node.draw = 5;\r\n            node.blocked = true;\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <>  \r\n                <UiContainer \r\n                    finder={this.finder} \r\n                    reset={this.reset}\r\n                    uiMode={this.state.uiMode}\r\n                />\r\n                <div className=\"fieldContainer fancyShadow\">\r\n                    <div style={{height: `${this.state.height*this.props.col}px`}} ref={this.fieldRef} className=\"field\">\r\n                        {this.state.field.map((item) =>\r\n                            <Node\r\n                                key={\"key\" + item.x + \"_\" + item.y + \"_\" + item.draw}\r\n                                width={this.state.width}\r\n                                height={this.state.height}\r\n                                item={item}\r\n                                nodeOnClick={this.nodeOnClick}\r\n                                createWall={this.createWall}\r\n                            />\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Field from './components/FieldClass';\r\n//import Field from './components/aStar/FieldWithCanvasRenderer';\r\n\r\n\r\n\r\nfunction App() {\r\n  \r\n  \r\n  return (\r\n    <div className=\"App\">\r\n      <Field  row={24} col={24}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}